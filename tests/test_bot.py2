"""Tests the bot functionality"""
from datetime import datetime
import pytest
from telethon.sync import TelegramClient
from telethon.tl.custom.message import Message
from telethon.tl.custom.conversation import Conversation
from module.shared import config_map

TIMEOUT = 8
bot_tag = config_map['test']['tag']


@pytest.mark.asyncio
async def test_start_cmd(client: TelegramClient):
    """Tests the /start command

    Args:
        client (TelegramClient): client used to simulate the user
    """
    conv: Conversation
    async with client.conversation(bot_tag, timeout=TIMEOUT) as conv:
        await conv.send_message("/start")  # send a command
        resp: Message = await conv.get_response()

        assert resp.text

@pytest.mark.asyncio
async def test_regolamentodidattico_cmd(client: TelegramClient):
    """Tests the /regolamentodidattico command

    Args:
        client (TelegramClient): client used to simulate the user
    """
    conv: Conversation
    async with client.conversation(bot_tag, timeout=TIMEOUT) as conv:
        buttons = (
            "reg_button_triennale_L31",
            "reg_button_triennale_L35",
            "reg_button_magistrale_LM18",
            "reg_button_magistrale_LM40",
        )

        for button in buttons:
            await conv.send_message("/regolamentodidattico")  # send a command
            resp: Message = await conv.get_response()

            assert resp.text

            await resp.click(data=button)  # click the button
            resp = await conv.get_edit()

            assert resp.text

            class_num = button.split('_')[-1]
            rule_button_text = "Regolamento Didattico 2020/2021_{}".format(class_num)

            await resp.click(data=rule_button_text)  # click "Regolamento" button

            resp = await conv.get_edit()

            assert resp.text

            resp = await conv.get_response()

            assert resp.document

@pytest.mark.asyncio
async def test_stats_cmd(client: TelegramClient):
    """Tests the /stats and /stats_tot command

    Args:
        client (TelegramClient): client used to simulate the user
    """
    conv: Conversation
    async with client.conversation(bot_tag, timeout=TIMEOUT) as conv:
        commands = ("/stats", "/stats 3", "/stats_tot")

        for command in commands:
            await conv.send_message(command)  # send a command
            resp: Message = await conv.get_response()

            assert resp.text

            resp: Message = await conv.get_response()

            assert resp.photo

